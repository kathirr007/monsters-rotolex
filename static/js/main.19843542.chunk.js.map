{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","props","monsters","map","uuid","SearchBox","placeholder","handleChange","inputName","htmlFor","type","onChange","App","handleSearchChange","e","setState","searchField","target","value","state","fetch","then","res","json","users","user","uuid4","this","filteredMonsters","filter","toLowerCase","includes","aria-label","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iVAIaA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAQG,GAAlC,0BACHC,IAAG,kBAAaJ,EAAQG,MAE1B,6BAAKH,EAAQK,OACb,4BAAIL,EAAQM,YCNLC,G,MAAW,SAACC,GACvB,OACE,qBAAKP,UAAU,YAAf,SACGO,EAAMC,SAASC,KAAI,SAACV,GAAD,OAClB,cAAC,EAAD,CAAyBA,QAASA,GAAvBA,EAAQW,aCRdC,G,MAAY,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,YAAaC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACrD,OACE,qCACE,uBAAOC,QAASD,EAAWd,UAAU,UAArC,iCAGA,uBACEgB,KAAK,SACLhB,UAAU,SACVE,GAAIY,EACJF,YAAaA,EACbK,SAAUJ,SCmCHK,E,kDAxCb,aAAe,IAAD,8BACZ,gBAgBFC,mBAAqB,SAACC,GACpB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXjB,SAAU,GACVc,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAEL,OADAA,EAAQA,EAAMrB,KAAI,SAACsB,GAAD,mBAAC,eAAeA,GAAhB,IAAsBrB,KAAMsB,mBACvC,EAAKX,SAAS,CAAEb,SAAUsB,S,oBAQvC,WAAU,IAAD,EAC2BG,KAAKR,MAA/BjB,EADD,EACCA,SAAUc,EADX,EACWA,YACZY,EAAmB1B,EAAS2B,QAAO,SAACpC,GAAD,OACvCA,EAAQK,KAAKgC,cAAcC,SAASf,EAAYc,kBAElD,OACE,uBAAMpC,UAAU,MAAhB,UACE,oBAAIsC,aAAW,aAAf,8BACA,cAAC,EAAD,CACExB,UAAU,iBACVF,YAAY,kBACZC,aAAcoB,KAAKd,qBAErB,cAAC,EAAD,CAAUX,SAAU0B,W,GAnCVK,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.19843542.chunk.js","sourcesContent":["// import React from \"react\";\r\n\r\nimport \"./card-styles.css\";\r\n\r\nexport const Card = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        alt={`Monster ${monster.id}`}\r\n      />\r\n      <h2>{monster.name}</h2>\r\n      <p>{monster.email}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { Card } from \"../card/card.component\";\r\n\r\nimport \"./card-list-styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.uuid} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import \"./search-box-styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange, inputName }) => {\r\n  return (\r\n    <>\r\n      <label htmlFor={inputName} className=\"sr-only\">\r\n        Search For Monsters\r\n      </label>\r\n      <input\r\n        type=\"search\"\r\n        className=\"search\"\r\n        id={inputName}\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      />\r\n    </>\r\n  );\r\n};\r\n","import { Component } from \"react\";\nimport { v4 as uuid4 } from \"uuid\";\nimport \"./App.css\";\n\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((res) => res.json())\n      .then((users) => {\n        users = users.map((user) => ({ ...user, uuid: uuid4() }));\n        return this.setState({ monsters: users });\n      });\n  }\n\n  handleSearchChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <main className=\"App\">\n        <h1 aria-label=\"Page title\">Monsters rolodex</h1>\n        <SearchBox\n          inputName=\"searchMonsters\"\n          placeholder=\"search monsters\"\n          handleChange={this.handleSearchChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import ClassApp from \"./OrgApp\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}